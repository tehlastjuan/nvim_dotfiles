local icons = require("icons").icons

-- Picker, finder, etc.
return {
	{
		"ibhagwan/fzf-lua",
		cmd = "FzfLua",
		keys = {
			-- find in buffer
			{ "<leader><space>", "<cmd>FzfLua blines<cr>", desc = "Find files", mode = { "n", "x" } },

			-- find files
			{ "<leader>ff", "<cmd>FzfLua files<cr>", desc = "Find files" },
			{
				-- Read from ShaDa to include files that were already deleted from the buffer list.
				"<leader>fr",
				function()
					vim.cmd("rshada!")
					require("fzf-lua").oldfiles()
				end,
				desc = "Recently opened files",
			},

			-- find buffers
			{ "<leader>,", "<cmd>FzfLua buffers sort_mru=true sort_lastused=true<cr>", desc = "Buffers" },

			-- git
			{ "<leader>fg", "<cmd>FzfLua git_files<cr>", desc = "Find files (git)" },
			{ "<leader>fc", "<cmd>FzfLua git_commits<CR>", desc = "Commits" },
			{ "<leader>fs", "<cmd>FzfLua git_status<CR>", desc = "Status" },

			-- grep
			{ "<leader>f/", "<cmd>FzfLua live_grep<cr>", desc = "Grep" },
			{ "<leader>fv", "<cmd>FzfLua grep_visual<cr>", desc = "Grep visual selection", mode = "x" },

			{ "<leader>fh", "<cmd>FzfLua help_tags<cr>", desc = "Help" },
			{ "<leader>fk", "<cmd>FzfLua keymaps<cr>", desc = "Key Maps" },
			{ "<leader>fl", "<cmd>FzfLua highlights<cr>", desc = "Highlights" },
			{ "<leader>fm", "<cmd>FzfLua command_history<cr>", desc = "Command History" },
			{ "<leader>f<", "<cmd>FzfLua resume<cr>", desc = "Resume last fzf command" },

			-- diagnostics
			{ "<leader>fd", "<cmd>FzfLua lsp_document_diagnostics<cr>", desc = "Document diagnostics" },

			-- lsp
			--{ "gd", "<cmd>FzfLua lsp_definitions     jump_to_single_result=true ignore_current_line=true<cr>", desc = "Goto Definition" },
			--{ "gr", "<cmd>FzfLua lsp_references      jump_to_single_result=true ignore_current_line=true<cr>", desc = "References", nowait = true },
			--{ "gI", "<cmd>FzfLua lsp_implementations jump_to_single_result=true ignore_current_line=true<cr>", desc = "Goto Implementation" },
			--{ "gy", "<cmd>FzfLua lsp_typedefs        jump_to_single_result=true ignore_current_line=true<cr>", desc = "Goto T[y]pe Definition" },

			--{ "gr", "<cmd>Telescope lsp_references<cr>", desc = "References", nowait = true },
			--{ "K", vim.lsp.buf.hover, desc = "Hover" },
			--{ "gK", vim.lsp.buf.signature_help, desc = "Signature Help", has = "signatureHelp" },
			--{ "<c-k>", vim.lsp.buf.signature_help, mode = "i", desc = "Signature Help", has = "signatureHelp" },

			--{ "<leader>ca", vim.lsp.buf.code_action, desc = "Code Action", mode = { "n", "v" }, has = "codeAction" },
			--{ "<leader>cr", vim.lsp.buf.rename, desc = "Rename", has = "rename" },
			--{ "<leader>cc", vim.lsp.codelens.run, desc = "Run Codelens", mode = { "n", "v" }, has = "codeLens" },
			--{ "<leader>cC", vim.lsp.codelens.refresh, desc = "Refresh & Display Codelens", mode = { "n" }, has = "codeLens" },

			{ "z=", "<cmd>FzfLua spell_suggest<cr>", desc = "Spelling suggestions" },
		},
		opts = function()
			local actions = require("fzf-lua.actions")
			local config = require("fzf-lua.config")

			config.defaults.actions.files["ctrl-t"] = require("trouble.sources.fzf").actions.open

			return {
				{ "border-fused", "hide" },
				fzf_colors = true,
				fzf_opts = {
					["--info"] = "default",
					["--layout"] = "reverse-list",
					["--no-scrollbar"] = true,
					["--highlight-line"] = true,
				},
				keymap = {
					builtin = {
						["<c-/>"] = "toggle-help",
						["<c-a>"] = "toggle-fullscreen",
						["<c-i>"] = "toggle-preview",
						["<c-n>"] = "preview-page-down",
						["<c-m>"] = "preview-page-up",
					},
					fzf = {
						["alt-s"] = "toggle",
						["alt-a"] = "toggle-all",
						["ctrl-i"] = "toggle-preview",
						["ctrl-n"] = "preview-page-down",
						["ctrl-m"] = "preview-page-up",
						["ctrl-d"] = "half-page-down",
						["ctrl-u"] = "half-page-up",
					},
				},
				winopts = {
					row = 0.9,
					height = 0.8,
					width = 0.67,
					preview = {
						scrollbar = false,
						layout = "vertical",
						vertical = "up:60%",
					},
				},
				defaults = { git_icons = false },
				previewers = {
					codeaction = { toggle_behavior = "extend" },
				},
				-- Configuration for specific commands.
				files = {
					cwd_prompt = false,
					actions = {
						["alt-i"] = { actions.toggle_ignore },
						["alt-h"] = { actions.toggle_hidden },
					},
				},
				oldfiles = {
					include_current_session = true,
				},
				blines = {
					winopts = {
						height = 0.4,
						preview = { title = false },
						treesitter = { enabled = false },
					},
				},
				buffers = {
					winopts = {
						height = 0.20,
						width = 0.67,
						preview = { hidden = true },
					},
					actions = { ["tab"] = actions.buf_switch },
				},
				grep = {
					header_prefix = icons.misc.search .. " ",
					rg_glob_fn = function(query, opts)
						local regex, flags = query:match(string.format("^(.*)%s(.*)$", opts.glob_separator))
						-- Return the original query if there's no separator.
						return (regex or query), flags
					end,
				},
				helptags = {
					actions = {
						-- Open help pages in a vertical split.
						["enter"] = actions.help_vert,
					},
				},
				lsp = {
					symbols = {
						symbol_icons = icons.symbol_kinds,
					},
					code_actions = {
						winopts = {
							width = 70,
							height = 20,
							relative = "cursor",
							preview = {
								hidden = true,
								vertical = "down:50%",
							},
						},
					},
				},
				diagnostics = {
					-- Remove the dashed line between diagnostic items.
					multiline = 1,
					diag_icons = {
						icons.diagnostics.ERROR,
						icons.diagnostics.WARN,
						icons.diagnostics.INFO,
						icons.diagnostics.HINT,
					},
				},
			}
		end,
		init = function()
			---@diagnostic disable-next-line: duplicate-set-field
			vim.ui.select = function(items, opts, on_choice)
				local ui_select = require("fzf-lua.providers.ui_select")

				-- Register the fzf-lua picker the first time we call select.
				if not ui_select.is_registered() then
					ui_select.register(function(ui_opts)
						if ui_opts.kind == "luasnip" then
							ui_opts.prompt = "Snippet choice: "
							ui_opts.winopts = {
								relative = "cursor",
								height = 0.35,
								width = 0.3,
							}
						else
							ui_opts.winopts = { height = 0.5, width = 0.4 }
						end

						-- Use the kind (if available) to set the previewer"s title.
						if ui_opts.kind then
							ui_opts.winopts.title = string.format(" %s ", ui_opts.kind)
						end

						return ui_opts
					end)
				end

				-- Don't show the picker if there's nothing to pick.
				if #items > 0 then
					return vim.ui.select(items, opts, on_choice)
				end
			end
		end,
	},
}
